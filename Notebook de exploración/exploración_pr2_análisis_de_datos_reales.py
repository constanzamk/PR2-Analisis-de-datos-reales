# -*- coding: utf-8 -*-
"""Exploración - PR2 - Análisis de datos reales

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hGNfNUqgUThOoSqpRlGHgf-p3QjW_w8W

#PR2 - Análisis de datos reales
Prof. Jorge Ledesma

---

## Grupo #3

Constanza Martínez 21-0506

Christine Periche 21-0423

Daniel Toribio 21-0345

###**Tema:** Calidad de vida de un país
###**Referencia:** https://www.kaggle.com/datasets/constanzamk/quality-of-life-in-a-country

#**Análisis exploratorio**

###Creando el Dataframe
"""

#Importar Librerias
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
import folium

ruta_calidad='https://drive.google.com/uc?id=1gUgPXLjbh67UbFIKjqWxZGq7Ds4W_ddV'
df_calidad= pd.read_csv(ruta_calidad, index_col=0)

df_calidad.index.name = 'Posición'
df_calidad.rename(columns = {'Country':'País','Stability(14%)':'Estabilidad',
                             'Rights(15%)':'Derechos','Health(14%)':'Salud','Safety(14%)':'Seguridad',
                             'Climate(14%)':'Clima','Costs(15%)':'Costos','Popularity(14%)':'Popularidad'},
                  inplace = True)
df_calidad

df_calidad.info()

"""### Estadísticas de los datos"""

estadisticas = {'Categoría':['Estabilidad','Derechos','Salud',
                             'Seguridad','Clima','Costos','Popularidad','Total'],
                'Media':[df_calidad['Estabilidad'].median(),df_calidad['Derechos'].median(),
                         df_calidad['Salud'].median(), df_calidad['Seguridad'].median(),
                         df_calidad['Clima'].median(),df_calidad['Costos'].median(),
                         df_calidad['Popularidad'].median(),df_calidad['Total(100%)'].median()]}
estadisticasdf = pd.DataFrame(estadisticas).set_index('Categoría')
estadisticasdf

estadisticas2 = {'Categoría':['Puntaje de Calidad de vida más alto',
                               'Puntaje de Calidad de vida más bajo'],
                 'País':[df_calidad.loc[df_calidad['Total(100%)'].idxmax()],
                            df_calidad.loc[df_calidad['Total(100%)'].idxmin()]],
                 'Puntaje':[df_calidad['Total(100%)'].max(),
                            df_calidad['Total(100%)'].min()]}
estadisticasdf2 = pd.DataFrame(estadisticas2).set_index('Categoría')
estadisticasdf2

"""### Calidad de vida de los países frente a diferentes variables"""

import scipy.stats
from scipy.stats import pearsonr

x = df_calidad['Estabilidad']
y = df_calidad['Total(100%)']

Calidad_vs_Estabilidad = sns.regplot(x,y)
r, p = scipy.stats.pearsonr(x, y)

print("El coeficiente de correlación de Pearson es", r)
print("El valor p es", p)

x = df_calidad['Derechos']
y = df_calidad['Total(100%)']

Calidad_vs_Derechos = sns.regplot(x,y)
r, p = scipy.stats.pearsonr(x, y)

print("El coeficiente de correlación de Pearson es", r)
print("El valor p es", p)

x = df_calidad['Salud']
y = df_calidad['Total(100%)']

Calidad_vs_Salud = sns.regplot(x,y)
r, p = scipy.stats.pearsonr(x, y)

print("El coeficiente de correlación de Pearson es", r)
print("El valor p es", p)

x = df_calidad['Seguridad']
y = df_calidad['Total(100%)']

Calidad_vs_Seguridad = sns.regplot(x,y)
r, p = scipy.stats.pearsonr(x, y)

print("El coeficiente de correlación de Pearson es", r)
print("El valor p es", p)

x = df_calidad['Clima']
y = df_calidad['Total(100%)']

Calidad_vs_Clima = sns.regplot(x,y)
r, p = scipy.stats.pearsonr(x, y)

print("El coeficiente de correlación de Pearson es", r)
print("El valor p es", p)

x = df_calidad['Costos']
y = df_calidad['Total(100%)']

Calidad_vs_Costos = sns.regplot(x,y)
r, p = scipy.stats.pearsonr(x, y)

print("El coeficiente de correlación de Pearson es", r)
print("El valor p es", p)

x = df_calidad['Popularidad']
y = df_calidad['Total(100%)']

Calidad_vs_Popularidad = sns.regplot(x,y)
r, p = scipy.stats.pearsonr(x, y)

print("El coeficiente de correlación de Pearson es", r)
print("El valor p es", p)

"""### Popularidad de los países frente a diferentes variables"""

x = df_calidad['Estabilidad']
y = df_calidad['Popularidad']

Popularidad_vs_Estabilidad = sns.regplot(x,y)
r, p = scipy.stats.pearsonr(x, y)

print("El coeficiente de correlación de Pearson es", r)
print("El valor p es", p)

x = df_calidad['Derechos']
y = df_calidad['Popularidad']

Popularidad_vs_Derechos = sns.regplot(x,y)
r, p = scipy.stats.pearsonr(x, y)

print("El coeficiente de correlación de Pearson es", r)
print("El valor p es", p)

x = df_calidad['Salud']
y = df_calidad['Popularidad']

Popularidad_vs_Salud = sns.regplot(x,y)
r, p = scipy.stats.pearsonr(x, y)

print("El coeficiente de correlación de Pearson es", r)
print("El valor p es", p)

x = df_calidad['Seguridad']
y = df_calidad['Popularidad']

Popularidad_vs_Seguridad = sns.regplot(x,y)
r, p = scipy.stats.pearsonr(x, y)

print("El coeficiente de correlación de Pearson es", r)
print("El valor p es", p)

x = df_calidad['Clima']
y = df_calidad['Popularidad']

Popularidad_vs_Clima = sns.regplot(x,y)
r, p = scipy.stats.pearsonr(x, y)

print("El coeficiente de correlación de Pearson es", r)
print("El valor p es", p)

x = df_calidad['Costos']
y = df_calidad['Popularidad']

Popularidad_vs_Costos = sns.regplot(x,y)
r, p = scipy.stats.pearsonr(x, y)

print("El coeficiente de correlación de Pearson es", r)
print("El valor p es", p)

"""### Relación entre seguridad & costos, salud y derechos

"""

r1, p1 = scipy.stats.pearsonr(Seguridad, Costos)
r2, p2 = scipy.stats.pearsonr(Seguridad, Salud)
r3, p3 = scipy.stats.pearsonr(Seguridad, Derechos)


correlacion_seguridad = {'Variable':['Costos', 'Salud','Derechos'],
                      'Coeficiente de correlación':[r1, r2, r3],
                      'Valor de P':[p1, p2, p3]}

correlacion_seguridaddf = pd.DataFrame(correlacion_seguridad).set_index('Variable')

fig = plt.figure(figsize = (8, 2))
ax = fig.add_subplot(111)

ax.table(cellText = correlacion_seguridaddf.values,
          rowLabels = correlacion_seguridaddf.index,
          colLabels = correlacion_seguridaddf.columns,
          loc = "center"
         )
ax.set_title("Análisis de relación entre seguridad y distintas variables")

ax.axis("off");

"""### Relación entre Estabilidad & derechos y salud"""

r1, p1 = scipy.stats.pearsonr(Estabilidad, Derechos)
r2, p2 = scipy.stats.pearsonr(Estabilidad, Salud)

correlacion_estabilidad = {'Variable':['Derechos', 'Salud'],
                      'Coeficiente de correlación':[r1, r2],
                      'Valor de P':[p1, p2]}

correlacion_estabilidaddf = pd.DataFrame(correlacion_estabilidad).set_index('Variable')

fig = plt.figure(figsize = (8, 2))
ax = fig.add_subplot(111)

ax.table(cellText = correlacion_estabilidaddf.values,
          rowLabels = correlacion_estabilidaddf.index,
          colLabels = correlacion_estabilidaddf.columns,
          loc = "center"
         )
ax.set_title("Análisis de relación entre Estabilidad y distintas variables")

ax.axis("off");

"""### Relación entre Clima & demás variables"""

r1, p1 = scipy.stats.pearsonr(Clima, Estabilidad)
r2, p2 = scipy.stats.pearsonr(Clima, Derechos)
r3, p3 = scipy.stats.pearsonr(Clima, Salud)
r4, p4 = scipy.stats.pearsonr(Clima, Seguridad)
r5, p5 = scipy.stats.pearsonr(Clima, Costos)
r6, p6 = scipy.stats.pearsonr(Clima, Popularidad)

correlacion_clima = {'Variable':['Estabilidad', 'Derechos','Salud','Seguridad',
                                       'Costos','Popularidad'],
                      'Coeficiente de correlación':[r1, r2, r3, r4, r5, r6],
                      'Valor de P':[p1, p2, p3, p4, p5, p6]}

correlacion_climadf = pd.DataFrame(correlacion_clima).set_index('Variable')

fig = plt.figure(figsize = (8, 2))
ax = fig.add_subplot(111)

ax.table(cellText = correlacion_climadf.values,
          rowLabels = correlacion_climadf.index,
          colLabels = correlacion_climadf.columns,
          loc = "center"
         )
ax.set_title("Análisis de relación entre Clima y distintas variables")

ax.axis("off");

"""### Gráficos de País & Variables

"""

x= df_calidad.sort_index().head(15)

#Grafico Pais-Estabilidad
plt.bar(x['País'],x['Estabilidad'])
plt.xticks(rotation=90)
plt.xlabel('Paises')
plt.ylabel('Estabilidad')
plt.title('Grafico País-Estabilidad')
plt.show()

#Grafico Pais-Clima
plt.bar(x['País'],x['Clima'])
plt.xticks(rotation=90)
plt.xlabel('Paises')
plt.ylabel('Clima')
plt.title('Grafico País-Variación del Clima')
plt.show()

#Grafico Pais-Derechos
plt.bar(x['País'],x['Derechos'])
plt.xticks(rotation=90)
plt.xlabel('Paises')
plt.ylabel('Derechos')
plt.title('Grafico País-Derechos')
plt.show()

dispersion= px.scatter(df_calidad,x="Estabilidad", y="Derechos", color="Total(100%)",
                       size="Total(100%)", template="plotly", hover_data=['País','Estabilidad','Clima'],
                       title='Gráfico de dispersión de estabilidad cruzada y derechos')
dispersion.show()

from seaborn.categorical import swarmplot
import matplotlib.pyplot as plt
#Relación entre Genero y Popularidad.

plt.figure(figsize=(25,5))
swarmplot= sns.swarmplot(x='País', y='Salud', data= df_calidad, s=11)
swarmplot.set_xticklabels(swarmplot.get_xticklabels(), rotation =90)
swarmplot.set_title('Relación entre País y Salud')

"""### Gráfico de correlación de variables


"""

#Mapa de Calor
import plotly.graph_objects as go 

matriz = df_calidad.corr()
lista_x = ['Popularidad','Clima','Salud','Estabilidad','Derechos','Seguridad','Costos' ] 

fig_heatmap = go.Figure(data= go.Heatmap(
    z= matriz,
    x= lista_x,
    y= lista_x,
    hoverongaps= False))
fig_heatmap.update_layout(margin = dict(t=200, r=200, b=200, l=200),
                          width=800, height=650,
                          autosize = False)
fig_heatmap.show()

"""### Mapas"""

#Pais con menor calidad de vida
latitud= -4.038333
longitud= 21.758664
# Creando el marcador
marcador = folium.CircleMarker(
    [latitud, longitud],
    radius = 10,
    color = "red",
    fill_color = "red"
)
menorcalidad = folium.map.FeatureGroup()
# Añadiendo el 'marcador' 
menorcalidad.add_child(marcador);

# Mapa de rep.Congo
repcongo_map = folium.Map(location=[-4.038333, 21.758664],
                       zoom_start = 3)

# Agregando el grupo de entidades al mapa
repcongo_map.add_child(menorcalidad)

# Mostrando mapa con marcador
repcongo_map

#País con Mayor Calidad de Vida
latitud = -25.274398
longitud = 133.775136


 # Mapa de Australia
australia_map = folium.Map(location=[-25.274398, 133.775136],
                       zoom_start = 2)

# Creando el marcador y agregándolo al mapa
folium.Marker([latitud, longitud],
              popup = "Australia, País con mayor calidad de vida").add_to(australia_map)

# Mostrando mapa con marcador y etiqueta
australia_map

"""#**Aprendizaje supervisado (regresión)**


"""

# Explorando  variables de interés
import seaborn as sns
yvar = ['Total(100%)']
Xvars = ['Estabilidad', 'Derechos', 'Salud', 'Seguridad','Clima','Costos','Popularidad']
sns.pairplot(df_calidad, x_vars = Xvars, y_vars = yvar)

# Separando las variables
y = df_calidad[yvar]
X = df_calidad[Xvars]

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = .2, random_state = 0)

"""## Entrenamiento

"""

from sklearn import tree
modelo = tree.DecisionTreeRegressor()
# Entrenando el modelo
modelo.fit(X_train, y_train)

"""## Evaluación"""

y_eval = modelo.predict(X_test)

from sklearn.metrics import r2_score

r2 = r2_score(y_test, y_eval)
r2

"""## Predicción

"""

x_pred = pd.DataFrame({'Estabilidad': [50],
                       'Derechos': [50],
                       'Salud': [50],
                       'Seguridad': [50],
                       'Clima':[90],
                       'Costos':[90],
                       'Popularidad':[90]})

y_pred = modelo.predict(x_pred)
y_pred